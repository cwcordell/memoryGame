@page "/game"
@rendermode InteractiveServer

<PageTitle>Memory Game</PageTitle>

<h1>Memory Game</h1>

<hr />

<div class="status-bar">
    <div class="status-bar-item">
            Matches Made: @(MatchesMade)/@DeckSize
    </div>
    <div class="status-bar-item">
            Score: @(MatchesMade == 0 ? 0 : (int)(((float)MatchesMade / Attempts) * 100))
    </div>
    <div class="status-bar-item">
            Attempts: @(Attempts)
    </div>
</div>

<div class="grid-container">
    @for (int i = 0; i < cards.Length; i++)
    {
        var card = cards[i];
        <div id="@i" class="card @(card.IsMatched ? "matched-card" : "")
            @(card == FirstSelectedCard || card == SecondSelectedCard ? "card-selected" : "")"
            style="background-color: @(card.IsFlipped ? card.Color : "")" @onclick="() => CardClicked(card)">
            @if (card.IsFlipped)
            {
                <span>@card.Color</span>
            }
            else
            {
                <span>?</span>
            }
        </div>
    }
</div>


<button class="btn btn-primary" @onclick="ResetGame">Reset Game</button>
@if (debug)
{
<div class="status-bar">
    <div class="status-bar-item">
        <h4>First Selected Card: @(FirstSelectedCard != null ? FirstSelectedCard.Color : "none")</h4>
    </div>
    <div class="status-bar-item">
        <h4>Second Selected Card: @(SecondSelectedCard != null ? SecondSelectedCard.Color : "none")</h4>
    </div>
</div>
}
@code {
    private bool debug = true;
    private static int DeckSize = 64;
    private Card[] cards = Array.Empty<Card>();
    private Card? FirstSelectedCard = null;
    private Card? SecondSelectedCard = null;
    private int Attempts = 0;
    private int MatchesMade = 0;
    private static string[] colors = new string[]
    {
"Red", "Lime", "Blue", "Aqua", "Navy", "Teal", "Olive", "Maroon", "Fuchsia", "Yellow",
"Green", "Cyan", "Purple", "azure", "Pink", "Orange", "Gold", "Ivory", "Coral", "Beige",
"Indigo", "Violet", "Plum", "Khaki", "Peru", "Salmon", "Sienna", "Tan", "Thistle", "Tomato",
"Turquoise", "Wheat"
    };
    private void ResetGame()
    {
        foreach (var card in cards)
        {
            card.Reset();
        }
        cards = ShuffleCards(cards);
        FirstSelectedCard = null;
        SecondSelectedCard = null;
        Attempts = 0;
        MatchesMade = 0;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        cards = ShuffleCards(GenerateCards(DeckSize / 2));
    }

    private static Card[] GenerateCards(int count)
    {
        Card[] cards = new Card[DeckSize];
        Random random = new Random();

        for (int i = 0; i < count; i++)
        {
            cards[i] = new Card { Id = i, Color = colors[i], IsFlipped = false };
            cards[cards.Length - 1 - i] = new Card { Id = cards.Length - 1 - i, Color = colors[i], IsFlipped = false };
        }

        return cards;
    }

    private static Card[] ShuffleCards(Card[] cards)
    {
        Random random = new Random();
        int n = cards.Length;
        while (n > 1)
        {
            int k = random.Next(n);
            n--;
            Card temp = cards[n];
            cards[n] = cards[k];
            cards[k] = temp;
        }
        return cards;
    }

    private void CardClicked(Card card)
    {
        // If the card is already matched, do nothing
        if (card.IsMatched)
        {
            return;
        }

        // Handle when the user clicks the FirstSelectedCard again without selecting a second card, do nothing
        if (FirstSelectedCard != null && SecondSelectedCard == null && FirstSelectedCard == card)
        {
            return;
        }

        // Handle the case where the two selected cards did not match on the previous turn
        if (FirstSelectedCard != null && SecondSelectedCard != null)
        {
            FirstSelectedCard.IsFlipped = false;
            SecondSelectedCard.IsFlipped = false;
            FirstSelectedCard = null;
            SecondSelectedCard = null;
        }

        // Toggle the card's flipped state
        card.IsFlipped = true;

        // Handle matching for the first and second selected cards
        if (FirstSelectedCard == null)
        {
            FirstSelectedCard = card;
            return;
        }

        // Handle when the second card is selected, check if the colors match,
        // update the attempts and matches made
        SecondSelectedCard = card;
        Attempts++;
        if (FirstSelectedCard.Color == SecondSelectedCard.Color)
        {
            FirstSelectedCard.IsMatched = true;
            SecondSelectedCard.IsMatched = true;
            FirstSelectedCard = null;
            SecondSelectedCard = null;
            MatchesMade++;
        }
    }

    private class Card
    {
        public int Id { get; set; }
        public string Color { get; set; } = "lightgrey";
        public bool IsFlipped { get; set; } = false;
        public bool IsMatched { get; set; } = false;

        public void Reset()
        {
            IsFlipped = false;
            IsMatched = false;
        }
    }
}